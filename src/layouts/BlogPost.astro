---
import '@/styles/mdx.css'
import type { CollectionEntry } from 'astro:content'
import BaseHead from '../components/BaseHead.astro'
import Footer from '../components/Footer.astro'
import FormattedDate from '../components/FormattedDate.astro'
import TailwindIndicator from '@/components/TailwindIndicator.astro'
import Header from '@/components/Header.astro'
import { GiscusSection } from '@/components/giscus'
import { isProd } from '@/lib/utils'

type Props = CollectionEntry<'blog'>['data']

const { isDraft, title, description, pubDate, updatedDate, heroImage } =
  Astro.props
---

<script is:inline>
  function setDarkMode(document) {
    const getThemePreference = () => {
      if (
        typeof localStorage !== 'undefined' &&
        localStorage.getItem('theme')
      ) {
        return localStorage.getItem('theme')
      }
      return window.matchMedia('(prefers-color-scheme: dark)').matches
        ? 'dark'
        : 'theme-light'
    }
    const isDark = getThemePreference() === 'dark'
    document.documentElement.classList[isDark ? 'add' : 'remove']('dark')

    if (typeof localStorage !== 'undefined') {
      const observer = new MutationObserver(() => {
        const isDark = document.documentElement.classList.contains('dark')
        localStorage.setItem('theme', isDark ? 'dark' : 'theme-light')
      })
      observer.observe(document.documentElement, {
        attributes: true,
        attributeFilter: ['class'],
      })
    }
  }

  setDarkMode(document)

  document.addEventListener('astro:before-swap', (ev) => {
    // Pass the incoming document to set the theme on it
    setDarkMode(ev.newDocument)
  })
</script>

<html lang="en">
  <head>
    <BaseHead title={title} description={description} />
  </head>
  <body class="min-h-svh w-full bg-background relative font-body flex flex-col">
    <div
      class="bg-background/95 h-28 fixed left-0 top-0 w-full backdrop-blur-sm gradient-mask-b-0"
    >
    </div>
    <main class="max-w-screen-sm w-full mx-auto pt-32 flex-1">
      <div class="container">
        {isDraft && <p>(draft)</p>}
        <Header title={`${title}`} breadcrumbItems={[]} />

        <div class="flex flex-col text-sm mb-10">
          <p>
            <FormattedDate date={pubDate} />
            {
              updatedDate && (
                <>
                  ãƒ» Last updated on <FormattedDate date={updatedDate} />
                </>
              )
            }
          </p>
          <div class="flex items-center gap-x-6 mt-1">
            <slot name="breadcrumbs" />
          </div>
        </div>

        <article>
          <div class="mb-10">
            {
              heroImage && (
                <img width={1020} height={510} src={heroImage} alt="" />
              )
            }
          </div>
          <slot />
          <GiscusSection client:load className="mx-auto mt-20" />
        </article>
      </div>
    </main>
    <Footer />
    {!isProd && <TailwindIndicator />}
  </body>
</html>
